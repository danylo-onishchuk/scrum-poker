{"version":3,"sources":["types.ts","components/GameButtons/GameButtons.tsx","components/Login/Login.tsx","components/Table/Table.tsx","components/VoteForm/VoteForm.tsx","App.tsx","components/helpers.tsx","index.tsx"],"names":["WSEvents","CurrentGameStage","GameButtons","props","startClick","finishClick","currentGameStage","allVoted","className","type","onClick","disabled","Game","Login","loginClick","onSubmit","name","id","BasicTable","clients","opacity","map","client","style","points","ready","VoteForm","voteClick","point","value","W3CWebSocket","App","useState","setClients","setCurrentGameStage","pointsOpacity","setPointsOpacity","useEffect","onopen","send","OpenConnection","onmessage","message","serverData","JSON","parse","data","event","shift","Overview","clientsPoints","user","Number","averagePoint","length","reduce","a","b","gamers","filter","every","preventDefault","target","Preparing","ChoosedCard","StartVote","FinishVote","Math","round","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0efe3066.chunk.js","sourcesContent":["export type Client = {\n  id: number,\n  name: string,\n  points: number,\n  ready: boolean,\n};\n\nexport const enum WSEvents {\n  OpenConnection = 'openConnection',\n  Login = 'login',\n  StartVote = 'startVote',\n  FinishVote = 'finishVote',\n  ChoosedCard = 'choosedCard',\n}\n\nexport const enum CurrentGameStage {\n  Login = 'login',\n  Preparing = 'preparing',\n  Game = 'game',\n  Overview = 'overview',\n}\n","import { FC } from 'react';\nimport { CurrentGameStage } from '../../types';\n\ninterface Props {\n  startClick: (event: any) => void;\n  finishClick: (event: any) => void;\n  currentGameStage: CurrentGameStage;\n  allVoted: boolean;\n}\n\nexport const GameButtons:FC<Props> = (props: any) => {\n  const {\n    startClick,\n    finishClick,\n    currentGameStage,\n    allVoted,\n  } = props;\n\n  return (\n    <div className=\"loginWrapper\">\n      <button\n        type=\"button\"\n        onClick={startClick}\n        disabled={currentGameStage === CurrentGameStage.Game}\n      >\n        Start Game\n      </button>\n      <button\n        type=\"button\"\n        onClick={finishClick}\n        disabled={!allVoted}\n      >\n        Finish Game\n      </button>\n    </div>\n  );\n};\n","export function Login(props: any) {\n  const { loginClick } = props;\n\n  return (\n    <div className=\"loginWrapper\">\n      <form onSubmit={loginClick}>\n        <input type=\"text\" name=\"name\" id=\"name\" />\n        <button\n          type=\"submit\"\n        >\n          Login\n        </button>\n      </form>\n    </div>\n  );\n}\n","import { FC } from 'react';\nimport { Client } from '../../types';\nimport './Table.css';\n\ninterface Props {\n  clients: Client[];\n  opacity: number;\n}\n\nexport const BasicTable: FC<Props> = ({ clients, opacity }) => {\n  return (\n    <div className=\"tableWrapper\">\n      {clients.map(client => (\n        <div key={client.id} className=\"clientsWrapper\">\n          <div>\n            {client.name}\n          </div>\n          <div style={{ opacity }}>\n            {client.points || ''}\n          </div>\n          {client.ready && (\n            <div>I choosed card!</div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ninterface Props {\n  voteClick: (event: any) => void;\n}\n\nexport const VoteForm:FC<Props> = (props) => {\n  const { voteClick } = props;\n\n  const points = [1, 2, 3, 5, 8, 13];\n\n  return (\n    <div className=\"loginWrapper\">\n      <form onSubmit={voteClick}>\n        <select\n          name=\"points\"\n          id=\"points\"\n        >\n          {points.map(point => (\n            <option value={point}>{point}</option>\n          ))}\n        </select>\n        <button\n          type=\"submit\"\n        >\n          Vote\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { GameButtons } from './components/GameButtons/GameButtons';\nimport { Login } from './components/Login/Login';\nimport { BasicTable } from './components/Table/Table';\nimport { Client, CurrentGameStage, WSEvents } from './types';\nimport { VoteForm } from './components/VoteForm/VoteForm';\nimport { checkIfAllVoted } from './components/helpers';\n\nconst client = new W3CWebSocket('wss://danylo-scrum-poker.herokuapp.com');\n\nexport function App() {\n  const [clients, setClients] = useState<Client[]>([]);\n  const [currentGameStage, setCurrentGameStage] = useState(\n    CurrentGameStage.Login,\n  );\n  const [pointsOpacity, setPointsOpacity] = useState(1);\n\n  useEffect(() => {\n    client.onopen = () => {\n      client.send([WSEvents.OpenConnection, 'open']);\n    };\n\n    client.onmessage = (message: any) => {\n      const serverData = JSON.parse(message.data);\n      const [event] = serverData;\n\n      serverData.shift();\n\n      switch (event) {\n        case 'openFromServer':\n          setClients(serverData);\n          break;\n\n        case 'loginFromServer':\n          setClients(serverData);\n          break;\n\n        case 'choosedCardFromServer':\n          setClients(serverData);\n          break;\n\n        case 'startVoteFromServer':\n          setPointsOpacity(0);\n          setCurrentGameStage(CurrentGameStage.Game);\n          setClients(serverData);\n          break;\n        case 'finishVoteFromServer':\n          setPointsOpacity(1);\n          setCurrentGameStage(CurrentGameStage.Overview);\n          setClients(serverData);\n          break;\n\n        default:\n          break;\n      }\n    };\n  }, []);\n\n  const loginClick = (event: any) => {\n    event.preventDefault();\n\n    const name = event.target.name.value;\n\n    client.send([WSEvents.Login, name]);\n    setCurrentGameStage(CurrentGameStage.Preparing);\n  };\n\n  const voteClick = (event: any) => {\n    event.preventDefault();\n\n    const points = event.target.points.value;\n\n    client.send([WSEvents.ChoosedCard, points]);\n  };\n\n  const startClick = () => {\n    client.send([WSEvents.StartVote, 'startVote']);\n  };\n\n  const finishClick = () => {\n    client.send([WSEvents.FinishVote, 'finishVote']);\n  };\n\n  const clientsPoints = clients.map(user => Number(user.points));\n\n  let averagePoint = 0;\n\n  if (clientsPoints.length > 0) {\n    averagePoint = clientsPoints\n      .reduce((a, b) => (a + b)) / clientsPoints.length;\n  }\n\n  const gamers = clients.filter(user => user.name !== 'anonym');\n  const allVoted = checkIfAllVoted(gamers);\n\n  return (\n    <div className=\"gameWrapper\">\n      {currentGameStage === CurrentGameStage.Login && (\n        <Login loginClick={loginClick} />\n      )}\n      {currentGameStage === CurrentGameStage.Game && (\n        <VoteForm voteClick={voteClick} />\n      )}\n      {currentGameStage !== CurrentGameStage.Login && (\n        <GameButtons\n          startClick={startClick}\n          finishClick={finishClick}\n          currentGameStage={currentGameStage}\n          allVoted={allVoted}\n        />\n      )}\n      <BasicTable clients={gamers} opacity={pointsOpacity} />\n      <br />\n      {currentGameStage === CurrentGameStage.Overview && (\n        <div>\n          Average:\n          {Math.round(averagePoint)}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { Client } from '../types';\n\nexport const checkIfAllVoted = (users: Client[]) => {\n  return users.every(user => user.ready === true);\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}